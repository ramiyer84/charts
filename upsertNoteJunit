package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration;
import axa.partners.clp.dms.migration.data.dms.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

import static org.junit.Assert.assertTrue;

@ExtendWith(MockitoExtension.class)
public class SelmedDMSUpdateServiceTest {

	@Mock
	DataSource dataSource;

	@Mock
	DataSource riskDataSource;
	
	@Mock
	DataSource decisionsDataSource;
	
	@Mock
	Connection connection;
	
	@Mock
	Statement st;

	@Mock
	ResultSet rs;

	@Mock
	PreparedStatement statement;
	
	LocalDateTime localDateTime;
	
	LocalDate localDate;	
	
	@Test
	public void testSelmedDMSRisksApplicationFileUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSRisksApplicationFileUpdatePackage updatePackage = new SelmedDMSRisksApplicationFileUpdatePackage();
        updatePackage.setId(10000l);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setLocked(true);
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        
        try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
        
		assertTrue(status);
	}
	
	@Test
	public void testSelmedDMSCoveragesUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSCoveragesUpdatePackage updatePackage = new SelmedDMSCoveragesUpdatePackage();
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setAerasCappingApplies(true);
        updatePackage.setCoverageId("T287248478TDD");
        updatePackage.setCoverSubmitted(true);
        updatePackage.setCurrencyCode("EUR");
        updatePackage.setInsuredAmount(10000l);
        updatePackage.setLoanId(2378572835l);
        updatePackage.setMacaoCoverId("testID");
        updatePackage.setName(1234);
        updatePackage.setQuota(1.2);
        
        try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
		
		assertTrue(status);
	}
	
	@Test
	public void testSelmedDMSOptionsUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSOptionsUpdatePackage updatePackage = new SelmedDMSOptionsUpdatePackage();
        updatePackage.setOptionId("9EA01BC1-EACC-4172-6FEE-08D7DC85AD52");
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setAuthorId("NGOSJ");
        updatePackage.setDescription("OPTIONS");
        updatePackage.setLoanId(1234l);
        
        try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
		
		assertTrue(status);
	}
	
	@Test
	public void testSelmedDMSDecisionsApplicationFileUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSDecisionsApplicationFileUpdatePackage updatePackage = new SelmedDMSDecisionsApplicationFileUpdatePackage();
        updatePackage.setId(10000l);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setHasMedicalRiskSheet(true);
        
        try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
		
		assertTrue(status);
	}
	
	
	@Test
	public void testSelmedDMSRisksUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSRisksUpdatePackage updatePackage = new SelmedDMSRisksUpdatePackage();
        updatePackage.setId(10000l);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setRiskType(2);
        updatePackage.setRiskId("26736273");
        
        try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
		
		assertTrue(status);
	}
	
	@Test
	public void testSelmedDMSNotesUpdatePackage() throws Exception {
        Method method;
        boolean status = false;
		Mockito.when(dataSource.getConnection()).thenReturn(connection);
		Mockito.when(connection.createStatement()).thenReturn(st);
		Mockito.when(st.executeQuery(Mockito.anyString())).thenReturn(rs);
		Mockito.when(rs.next()).thenReturn(false);
		Mockito.when(connection.prepareStatement(Mockito.anyString())).thenReturn(statement);
		Mockito.when(statement.executeUpdate()).thenReturn(1);
		SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
		
		localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
        
        SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
        updatePackage.setId(10000l);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setRiskId("26736273");
        updatePackage.setAuthorId("NGO");
        updatePackage.setDescription("NOTES");
        updatePackage.setNoteId("123");
        updatePackage.setNoteType(2);
        
		try {
			method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
	        method.setAccessible(true);
			status = (boolean) method.invoke(service, connection, updatePackage);
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			System.out.println(e);
		}
		assertTrue(status);
	}
}
