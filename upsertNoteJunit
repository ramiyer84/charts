package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration;
import axa.partners.clp.dms.migration.data.decisions.Note;
import axa.partners.clp.dms.migration.data.dms.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.*;
import org.mockito.quality.Strictness;

import javax.sql.DataSource;
import java.lang.reflect.Method;
import java.sql.*;
import java.time.*;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class SelmedDMSUpdateServiceTest {

    @Mock DataSource dataSource;
    @Mock DataSource riskDataSource;
    @Mock DataSource decisionsDataSource;
    @Mock Connection connection;
    @Mock Statement st;
    @Mock ResultSet rs;
    @Mock PreparedStatement statement;

    private SelmedDMSUpdateService service;
    private final LocalDateTime now = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);

    @BeforeEach
    void setup() throws Exception {
        when(dataSource.getConnection()).thenReturn(connection);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(decisionsDataSource.getConnection()).thenReturn(connection);

        when(connection.createStatement()).thenReturn(st);
        when(st.executeQuery(anyString())).thenReturn(rs);
        when(rs.next()).thenReturn(false);

        // generic stub for all non-note-upsert updates/queries
        when(connection.prepareStatement(anyString())).thenReturn(statement);
        when(statement.executeUpdate()).thenReturn(1);
        when(statement.executeQuery()).thenReturn(rs);

        service = new SelmedDMSUpdateService(
            dataSource,
            riskDataSource,
            new ApplicationConfiguration(dataSource),
            decisionsDataSource
        );
    }

    // ... [six original updateSelmedDMSUpdatePackages tests unchanged] ...

    @Test
    public void testUpsertNote_PreMigration_InsertsNote() throws Exception {
        // build Note object
        Note note = new Note(0L, "FILE123", now, "pre-mig note");

        // -- stub risk lookup & reference date so preMigration == true
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber"))).thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class), rsRef = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("RID123");
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf(LocalDateTime.of(2023,1,1,0,0)));

        when(refStmt.executeQuery()).thenReturn(rsRef);
        when(rsRef.next()).thenReturn(true);
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf(LocalDateTime.of(2022,1,1,0,0)));

        // -- stub pre-migration note lookup to return none
        PreparedStatement preStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId"))).thenReturn(preStmt);
        ResultSet rsNotes = mock(ResultSet.class);
        when(preStmt.executeQuery()).thenReturn(rsNotes);
        when(rsNotes.next()).thenReturn(false);

        // -- now stub the two INSERT INTO Notes calls:
        PreparedStatement normalInsert  = mock(PreparedStatement.class);
        PreparedStatement closingInsert = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes")))
            .thenReturn(normalInsert, closingInsert);
        when(normalInsert.executeUpdate()).thenReturn(1);
        when(closingInsert.executeUpdate()).thenReturn(1);

        service.upsertNote(note, now);

        // only the *first* INSERT (the real pre-migration note) is verified here:
        verify(normalInsert).executeUpdate();
    }

    @Test
    public void testUpsertNote_PostMigration_InsertsNote() throws Exception {
        // build Note object
        Note note = new Note(0L, "FILE123", now, "post-mig note");

        // -- stub risk lookup & reference date so postMigration == true
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber"))).thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class), rsRef = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("RID123");
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf(LocalDateTime.of(2025,1,1,0,0)));

        when(refStmt.executeQuery()).thenReturn(rsRef);
        when(rsRef.next()).thenReturn(true);
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf(LocalDateTime.of(2024,1,1,0,0)));

        // -- stub post-migration note lookup to return none
        PreparedStatement postStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId"))).thenReturn(postStmt);
        ResultSet rsNotes = mock(ResultSet.class);
        when(postStmt.executeQuery()).thenReturn(rsNotes);
        when(rsNotes.next()).thenReturn(false);

        // -- stub the two INSERT INTO Notes calls:
        PreparedStatement normalInsert  = mock(PreparedStatement.class);
        PreparedStatement closingInsert = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes")))
            .thenReturn(normalInsert, closingInsert);
        when(normalInsert.executeUpdate()).thenReturn(1);
        when(closingInsert.executeUpdate()).thenReturn(1);

        service.upsertNote(note, now);

        // only the *first* INSERT (the real post-migration note) is verified here:
        verify(normalInsert).executeUpdate();
    }

    @Test
    public void testInsertClosingDossierNote_PreMigration_WithExistingMacaoNote() throws Exception {
        LocalDateTime original = LocalDateTime.of(2025,5,12,10,0);
        Note note = new Note(123L, "FILE123", original, "pre-mig note");

        // stub so isPreMigration() == true
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        ResultSet rsRisk = mock(ResultSet.class), rsRef = mock(ResultSet.class);

        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber"))).thenReturn(riskStmt, refStmt);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("RID123");
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

        when(refStmt.executeQuery()).thenReturn(rsRef);
        when(rsRef.next()).thenReturn(true);
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));

        // stub pre-migration lookup to *find* an existing Macao note
        PreparedStatement preStmt = mock(PreparedStatement.class);
        ResultSet rsNotes = mock(ResultSet.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId"))).thenReturn(preStmt);
        when(preStmt.executeQuery()).thenReturn(rsNotes);
        when(rsNotes.next()).thenReturn(true);

        // stub only the closing‐dossier INSERT
        PreparedStatement closeStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(closeStmt);

        service.upsertNote(note, original);

        // capture and assert the +2 minutes timestamp
        ArgumentCaptor<Timestamp> tsCap = ArgumentCaptor.forClass(Timestamp.class);
        verify(closeStmt).setTimestamp(eq(2), tsCap.capture());
        LocalDateTime plus2 = original.plusMinutes(2);
        Assertions.assertEquals(Timestamp.valueOf(plus2), tsCap.getValue());

        verify(closeStmt).setString(eq(4), eq("Dossier cloturé sans demande de conseil"));
        verify(closeStmt).executeUpdate();
    }
}