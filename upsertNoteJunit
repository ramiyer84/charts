package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration;
import axa.partners.clp.dms.migration.data.dms.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import javax.sql.DataSource;
import java.lang.reflect.Method;
import java.sql.*;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.startsWith;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class SelmedDMSUpdateServiceTest {

    @Mock DataSource dataSource;
    @Mock DataSource riskDataSource;
    @Mock DataSource decisionsDataSource;
    @Mock Connection connection;
    @Mock Statement st;
    @Mock ResultSet rs;
    @Mock PreparedStatement statement;

    private SelmedDMSUpdateService service;
    private LocalDateTime now;
    private LocalDate     today;

    @BeforeEach
    void setup() throws Exception {
        // all three datasources return the same mock Connection
        when(dataSource.getConnection()).thenReturn(connection);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(decisionsDataSource.getConnection()).thenReturn(connection);

        // generic stubs for the six original tests
        when(connection.createStatement()).thenReturn(st);
        when(st.executeQuery(anyString())).thenReturn(rs);
        when(rs.next()).thenReturn(false);
        when(connection.prepareStatement(anyString())).thenReturn(statement);
        when(statement.executeUpdate()).thenReturn(1);

        service = new SelmedDMSUpdateService(
            dataSource,
            riskDataSource,
            new ApplicationConfiguration(dataSource),
            decisionsDataSource
        );

        now   = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        today = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
    }

    // ---------- original 6 tests ----------

    @Test
    public void testSelmedDMSRisksApplicationFileUpdatePackage() throws Exception {
        SelmedDMSRisksApplicationFileUpdatePackage pkg = new SelmedDMSRisksApplicationFileUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setLocked(true);
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    @Test
    public void testSelmedDMSCoveragesUpdatePackage() throws Exception {
        SelmedDMSCoveragesUpdatePackage pkg = new SelmedDMSCoveragesUpdatePackage();
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setAerasCappingApplies(true);
        pkg.setCoverageId("T287248478TDD");
        pkg.setCoverSubmitted(true);
        pkg.setCurrencyCode("EUR");
        pkg.setInsuredAmount(10000L);
        pkg.setLoanId(2378572835L);
        pkg.setMacaoCoverId("testID");
        pkg.setName(1234);
        pkg.setQuota(1.2);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    @Test
    public void testSelmedDMSOptionsUpdatePackage() throws Exception {
        SelmedDMSOptionsUpdatePackage pkg = new SelmedDMSOptionsUpdatePackage();
        pkg.setOptionId("9EA01BC1-EACC-4172-6FEE-08D7DC85AD52");
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setAuthorId("NGOSJ");
        pkg.setDescription("OPTIONS");
        pkg.setLoanId(1234L);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    @Test
    public void testSelmedDMSDecisionsApplicationFileUpdatePackage() throws Exception {
        SelmedDMSDecisionsApplicationFileUpdatePackage pkg = new SelmedDMSDecisionsApplicationFileUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setHasMedicalRiskSheet(true);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    @Test
    public void testSelmedDMSRisksUpdatePackage() throws Exception {
        SelmedDMSRisksUpdatePackage pkg = new SelmedDMSRisksUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setRiskType(2);
        pkg.setRiskId("26736273");

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    @Test
    public void testSelmedDMSNotesUpdatePackage() throws Exception {
        SelmedDMSNotesUpdatePackage pkg = new SelmedDMSNotesUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setRiskId("26736273");
        pkg.setAuthorId("NGO");
        pkg.setDescription("NOTES");
        pkg.setNoteId("123");
        pkg.setNoteType(2);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        boolean result = (boolean) m.invoke(service, connection, pkg);

        assertTrue(result);
    }

    // ---------- new upsertNote() tests ----------

    @Test
    public void testUpsertNote_PreMigration_InsertsNote() throws Exception {
        // build a notes‐update package
        SelmedDMSNotesUpdatePackage pkg = new SelmedDMSNotesUpdatePackage();
        pkg.setFileNumber("FILE123");
        pkg.setCreationDate(now);
        pkg.setModificationDate(now);
        pkg.setOperation("MODIFY");
        pkg.setRiskId("RISK123");
        pkg.setAuthorId("macao.migration@partners.axa");
        pkg.setDescription("pre-migration insert");
        pkg.setNoteId("noteId1");
        pkg.setNoteType(2);

        // 1) risk info lookup returns a timestamp BEFORE the reference date
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber = ?")))
            .thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("someRiskId");
        // createdAt = 2023-01-01
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

        ResultSet rsRef = mock(ResultSet.class);
        when(refStmt.executeQuery()).thenReturn(rsRef);
        when(rsRef.next()).thenReturn(true);
        // reference date = 2024-01-01
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));

        // 2) pre-migration SELECT n.Id... returns no rows
        PreparedStatement preStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId = ? AND n.AuthorId = ?")))
            .thenReturn(preStmt);
        ResultSet rsPre = mock(ResultSet.class);
        when(preStmt.executeQuery()).thenReturn(rsPre);
        when(rsPre.next()).thenReturn(false);

        // 3) INSERT INTO Notes
        PreparedStatement insertStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
        when(insertStmt.executeUpdate()).thenReturn(1);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);

        boolean result = (boolean) m.invoke(service, connection, pkg);
        assertTrue(result);
    }

    @Test
    public void testUpsertNote_PostMigration_InsertsNote() throws Exception {
        // build a notes‐update package
        SelmedDMSNotesUpdatePackage pkg = new SelmedDMSNotesUpdatePackage();
        pkg.setFileNumber("FILE123");
        pkg.setCreationDate(now);
        pkg.setModificationDate(now);
        pkg.setOperation("MODIFY");
        pkg.setRiskId("RISK123");
        pkg.setAuthorId("macao.migration@partners.axa");
        pkg.setDescription("post-migration insert");
        pkg.setNoteId("noteId2");
        pkg.setNoteType(2);

        // 1) same risk info / reference lookup as before:
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber = ?")))
            .thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("someRiskId");
        // createdAt = 2024-01-01
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));

        ResultSet rsRef = mock(ResultSet.class);
        when(refStmt.executeQuery()).thenReturn(rsRef);
        when(rsRef.next()).thenReturn(true);
        // reference date = 2023-01-01
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

        // 2) post-migration SELECT n.Description returns no existing match
        PreparedStatement postStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("SELECT n.Description FROM Notes n WHERE n.RiskId")) )
            .thenReturn(postStmt);
        ResultSet rsPost = mock(ResultSet.class);
        when(postStmt.executeQuery()).thenReturn(rsPost);
        when(rsPost.next()).thenReturn(false);

        // 3) INSERT INTO Notes
        PreparedStatement insertStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
        when(insertStmt.executeUpdate()).thenReturn(1);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);

        boolean result = (boolean) m.invoke(service, connection, pkg);
        assertTrue(result);
    }
}