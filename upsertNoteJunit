package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration;
import axa.partners.clp.dms.migration.data.dms.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.*;

import javax.sql.DataSource;
import java.lang.reflect.Method;
import java.sql.*;
import java.time.*;

import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class SelmedDMSUpdateServiceTest {

    @Mock DataSource dataSource;
    @Mock DataSource riskDataSource;
    @Mock DataSource decisionsDataSource;
    @Mock Connection connection;
    @Mock Statement st;
    @Mock ResultSet rs;
    @Mock PreparedStatement statement;

    private SelmedDMSUpdateService service;
    private final LocalDateTime now = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);

    @BeforeEach
    void setup() {
        // wire all three to the same mock connection
        when(dataSource.getConnection()).thenReturn(connection);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(decisionsDataSource.getConnection()).thenReturn(connection);

        // generic stubs for the six original tests
        when(connection.createStatement()).thenReturn(st);
        when(st.executeQuery(anyString())).thenReturn(rs);
        when(rs.next()).thenReturn(false);

        when(connection.prepareStatement(anyString())).thenReturn(statement);
        when(statement.executeUpdate()).thenReturn(1);
        when(statement.executeQuery()).thenReturn(rs);

        service = new SelmedDMSUpdateService(
            dataSource,
            riskDataSource,
            new ApplicationConfiguration(dataSource),
            decisionsDataSource
        );
    }

    // ——————————————————————————————————————————————
    // Original six reflection‐based tests:
    // ——————————————————————————————————————————————

    @Test
    public void testSelmedDMSRisksApplicationFileUpdatePackage() throws Exception {
        SelmedDMSRisksApplicationFileUpdatePackage pkg = new SelmedDMSRisksApplicationFileUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setLocked(true);
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    @Test
    public void testSelmedDMSCoveragesUpdatePackage() throws Exception {
        SelmedDMSCoveragesUpdatePackage pkg = new SelmedDMSCoveragesUpdatePackage();
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setAerasCappingApplies(true);
        pkg.setCoverageId("T287248478TDD");
        pkg.setCoverSubmitted(true);
        pkg.setCurrencyCode("EUR");
        pkg.setInsuredAmount(10000L);
        pkg.setLoanId(2378572835L);
        pkg.setMacaoCoverId("testID");
        pkg.setName(1234);
        pkg.setQuota(1.2);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    @Test
    public void testSelmedDMSOptionsUpdatePackage() throws Exception {
        SelmedDMSOptionsUpdatePackage pkg = new SelmedDMSOptionsUpdatePackage();
        pkg.setOptionId("9EA01BC1-EACC-4172-6FEE-08D7DC85AD52");
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setAuthorId("NGOSJ");
        pkg.setDescription("OPTIONS");
        pkg.setLoanId(1234L);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    @Test
    public void testSelmedDMSDecisionsApplicationFileUpdatePackage() throws Exception {
        SelmedDMSDecisionsApplicationFileUpdatePackage pkg = new SelmedDMSDecisionsApplicationFileUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setHasMedicalRiskSheet(true);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    @Test
    public void testSelmedDMSRisksUpdatePackage() throws Exception {
        SelmedDMSRisksUpdatePackage pkg = new SelmedDMSRisksUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setFileNumber("1297284F");
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setRiskType(2);
        pkg.setRiskId("26736273");

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    @Test
    public void testSelmedDMSNotesUpdatePackage() throws Exception {
        SelmedDMSNotesUpdatePackage pkg = new SelmedDMSNotesUpdatePackage();
        pkg.setId(10000L);
        pkg.setCreatedAt(now);
        pkg.setCreationDate(now);
        pkg.setModificationDate(now);
        pkg.setOperation("TEST_OPERATION");
        pkg.setRiskId("26736273");
        pkg.setAuthorId("NGO");
        pkg.setDescription("NOTES");
        pkg.setNoteId("123");
        pkg.setNoteType(2);

        Method m = SelmedDMSUpdateService.class
            .getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(service, connection, pkg));
    }

    // ——————————————————————————————————————————————
    // New tests for upsertNote(), at the bottom so a reviewer sees just “added logic”
    // ——————————————————————————————————————————————

    @Test
    public void testUpsertNote_PreMigration_InsertsNote() throws Exception {
        // build a domain Note with the correct constructor signature
        Note note = new Note(0L, "FILE123", now, "pre-mig note");

        // stub out two queries: risk info and reference date
        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber"))).thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class);
        ResultSet rsRef  = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(refStmt.executeQuery()).thenReturn(rsRef);

        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("RID123");
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf("2023-01-01T00:00:00"));

        when(rsRef.next()).thenReturn(true);
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf("2022-01-01T00:00:00"));

        // pre‐migration: stub the Notes‐lookup to return empty
        PreparedStatement preStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId"))).thenReturn(preStmt);
        ResultSet rsNotes = mock(ResultSet.class);
        when(preStmt.executeQuery()).thenReturn(rsNotes);
        when(rsNotes.next()).thenReturn(false);

        // stub the insert
        PreparedStatement insertStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
        when(insertStmt.executeUpdate()).thenReturn(1);

        // invoke
        service.upsertNote(note, now);

        // verify we actually did an INSERT
        verify(insertStmt).executeUpdate();
    }

    @Test
    public void testUpsertNote_PostMigration_InsertsNote() throws Exception {
        Note note = new Note(0L, "FILE123", now, "post-mig note");

        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt  = mock(PreparedStatement.class);
        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber"))).thenReturn(riskStmt, refStmt);

        ResultSet rsRisk = mock(ResultSet.class);
        ResultSet rsRef  = mock(ResultSet.class);
        when(riskStmt.executeQuery()).thenReturn(rsRisk);
        when(refStmt.executeQuery()).thenReturn(rsRef);

        when(rsRisk.next()).thenReturn(true);
        when(rsRisk.getString(1)).thenReturn("RID123");
        when(rsRisk.getTimestamp(2)).thenReturn(Timestamp.valueOf("2023-01-01T00:00:00"));

        when(rsRef.next()).thenReturn(true);
        when(rsRef.getTimestamp(1)).thenReturn(Timestamp.valueOf("2020-01-01T00:00:00"));

        // post-migration: stub existing notes lookup to return none
        PreparedStatement postStmt = mock(PreparedStatement.class);
        ResultSet rsNotes = mock(ResultSet.class);
        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId"))).thenReturn(postStmt);
        when(postStmt.executeQuery()).thenReturn(rsNotes);
        when(rsNotes.next()).thenReturn(false);

        // stub the insert
        PreparedStatement insertStmt = mock(PreparedStatement.class);
        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
        when(insertStmt.executeUpdate()).thenReturn(1);

        service.upsertNote(note, now);

        verify(insertStmt).executeUpdate();
    }
}