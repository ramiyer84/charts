package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSCoveragesUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSDecisionsApplicationFileUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSNotesUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSOptionsUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSRisksApplicationFileUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.SelmedDMSRisksUpdatePackage;
import axa.partners.clp.dms.migration.data.dms.Entity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource;
import java.lang.reflect.Method;
import java.sql.*;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SelmedDMSUpdateServiceTest {

    @Mock DataSource dataSource;
    @Mock DataSource riskDataSource;
    @Mock DataSource decisionsDataSource;
    @Mock Connection connection;
    @Mock Statement st;
    @Mock ResultSet rs;
    @Mock PreparedStatement statement;

    SelmedDMSUpdateService service;
    LocalDateTime localDateTime;

    @BeforeEach
    public void setup() throws Exception {
        localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
        when(dataSource.getConnection()).thenReturn(connection);
        when(connection.createStatement()).thenReturn(st);
        when(connection.prepareStatement(anyString())).thenReturn(statement);
        when(statement.executeUpdate()).thenReturn(1);
        service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
    }

    @Test
    public void testSelmedDMSRisksApplicationFileUpdatePackage() throws Exception {
        SelmedDMSRisksApplicationFileUpdatePackage updatePackage = new SelmedDMSRisksApplicationFileUpdatePackage();
        updatePackage.setId(10000L);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setLocked(true);
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        assertTrue(invokeUpdate(updatePackage));
    }

    @Test
    public void testSelmedDMSCoveragesUpdatePackage() throws Exception {
        SelmedDMSCoveragesUpdatePackage updatePackage = new SelmedDMSCoveragesUpdatePackage();
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setAerasCappingApplies(true);
        updatePackage.setCoverageId("T287248478TDD");
        updatePackage.setCoverSubmitted(true);
        updatePackage.setCurrencyCode("EUR");
        updatePackage.setInsuredAmount(10000L);
        updatePackage.setLoanId(2378572835L);
        updatePackage.setMacaoCoverId("testID");
        updatePackage.setName(1234);
        updatePackage.setQuota(1.2);
        assertTrue(invokeUpdate(updatePackage));
    }

    @Test
    public void testSelmedDMSOptionsUpdatePackage() throws Exception {
        SelmedDMSOptionsUpdatePackage updatePackage = new SelmedDMSOptionsUpdatePackage();
        updatePackage.setOptionId("9EA01BC1");
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setAuthorId("NGOSJ");
        updatePackage.setDescription("OPTIONS");
        updatePackage.setLoanId(1234L);
        assertTrue(invokeUpdate(updatePackage));
    }

    @Test
    public void testSelmedDMSDecisionsApplicationFileUpdatePackage() throws Exception {
        SelmedDMSDecisionsApplicationFileUpdatePackage updatePackage = new SelmedDMSDecisionsApplicationFileUpdatePackage();
        updatePackage.setId(10000L);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setHasMedicalRiskSheet(true);
        assertTrue(invokeUpdate(updatePackage));
    }

    @Test
    public void testSelmedDMSRisksUpdatePackage() throws Exception {
        SelmedDMSRisksUpdatePackage updatePackage = new SelmedDMSRisksUpdatePackage();
        updatePackage.setId(10000L);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setFileNumber("1297284F");
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("TEST_OPERATION");
        updatePackage.setRiskType(2);
        updatePackage.setRiskId("26736273");
        assertTrue(invokeUpdate(updatePackage));
    }

    @Test
    public void testSelmedDMSNotesUpdatePackage() throws Exception {
        SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
        updatePackage.setId(10000L);
        updatePackage.setCreatedAt(localDateTime);
        updatePackage.setCreationDate(localDateTime);
        updatePackage.setModificationDate(localDateTime);
        updatePackage.setOperation("MODIFY");
        updatePackage.setRiskId("26736273");
        updatePackage.setAuthorId("macao.migration@partners.axa");
        updatePackage.setDescription("This is a test note");
        updatePackage.setNoteId("noteId123");
        updatePackage.setNoteType(2);
        updatePackage.setFileNumber("2024A000001");

        PreparedStatement riskStmt = mock(PreparedStatement.class);
        PreparedStatement refStmt = mock(PreparedStatement.class);
        PreparedStatement notesStmt = mock(PreparedStatement.class);
        PreparedStatement insertStmt = mock(PreparedStatement.class);
        ResultSet rs1 = mock(ResultSet.class);
        ResultSet rs2 = mock(ResultSet.class);
        ResultSet rs3 = mock(ResultSet.class);

        when(riskDataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber = ?"))).thenReturn(riskStmt, refStmt);
        when(riskStmt.executeQuery()).thenReturn(rs1);
        when(refStmt.executeQuery()).thenReturn(rs2);
        when(rs1.next()).thenReturn(true);
        when(rs1.getString(1)).thenReturn("riskId123");
        when(rs1.getTimestamp(2)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));
        when(rs2.next()).thenReturn(true);
        when(rs2.getTimestamp(1)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

        when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId = ?"))).thenReturn(notesStmt);
        when(notesStmt.executeQuery()).thenReturn(rs3);
        when(rs3.next()).thenReturn(false);

        when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
        when(insertStmt.executeUpdate()).thenReturn(1);

        assertTrue(invokeUpdate(updatePackage));
    }

    private boolean invokeUpdate(Entity updatePackage) throws Exception {
        Method method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        method.setAccessible(true);
        return (boolean) method.invoke(service, connection, updatePackage);
    }
}