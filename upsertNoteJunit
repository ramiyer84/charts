package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration; import axa.partners.clp.dms.migration.data.dms.SelmedDMSNotesUpdatePackage; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource; import java.lang.reflect.Method; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.time.Instant; import java.time.LocalDateTime; import java.time.ZoneOffset; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class) public class SelmedDMSUpdateServiceTest {

@Mock
DataSource dataSource;

@Mock
DataSource riskDataSource;

@Mock
DataSource decisionsDataSource;

@Mock
Connection connection;

@Mock
Statement st;

@Mock
ResultSet rs;

@Mock
PreparedStatement statement;

LocalDateTime localDateTime;

@BeforeEach
public void setup() throws Exception {
    MockitoAnnotations.openMocks(this);
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.createStatement()).thenReturn(st);
    when(st.executeQuery(anyString())).thenReturn(rs);
    when(rs.next()).thenReturn(false);

    // Match each SQL used in updateSelmedDMSUpdatePackages method
    when(connection.prepareStatement(contains("SELECT r.Id, r.FileNumber"))).thenReturn(statement);
    when(connection.prepareStatement(contains("SELECT n.Id, n.CreationDate, n.Description"))).thenReturn(statement);
    when(connection.prepareStatement(contains("UPDATE Notes SET"))).thenReturn(statement);
    when(connection.prepareStatement(contains("INSERT INTO Notes"))).thenReturn(statement);
    when(connection.prepareStatement(contains("INSERT INTO NoteHistories"))).thenReturn(statement);

    when(statement.executeQuery()).thenReturn(rs);
    when(statement.executeUpdate()).thenReturn(1);
}

@Test
public void testPostMigrationNoteInsertedWhenDifferent() throws Exception {
    Method method;
    boolean status = false;
    SelmedDMSUpdateService service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);

    localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);

    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setId(10000L);
    updatePackage.setCreatedAt(localDateTime);
    updatePackage.setCreationDate(localDateTime);
    updatePackage.setModificationDate(localDateTime);
    updatePackage.setOperation("TEST_OPERATION");
    updatePackage.setRiskId("26736273");
    updatePackage.setAuthorId("macao.migration@partners.axa");
    updatePackage.setDescription("new note description");
    updatePackage.setNoteId("noteId123");
    updatePackage.setNoteType(2);

    try {
        method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
        method.setAccessible(true);
        status = (boolean) method.invoke(service, connection, updatePackage);
    } catch (Exception e) {
        e.printStackTrace();
    }

    assertTrue(status);
}

}

