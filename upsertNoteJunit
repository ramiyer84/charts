import static org.mockito.Mockito.; import static org.junit.jupiter.api.Assertions.;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration; import axa.partners.clp.dms.migration.service.SelmedDMSUpdateService; import org.junit.jupiter.api.*; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.MockitoAnnotations; import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource; import java.lang.reflect.; import java.sql.; import java.time.*;

@ExtendWith(MockitoExtension.class) public class SelmedDMSUpdateServiceTest {

@Mock
DataSource dataSource;

@Mock
DataSource riskDataSource;

@Mock
DataSource decisionsDataSource;

@Mock
Connection connection;

@Mock
Statement st;

@Mock
ResultSet rs;

@Mock
PreparedStatement statement;

LocalDateTime localDateTime;
LocalDate localDate;

private SelmedDMSUpdateService service;
private AutoCloseable mocks;

@BeforeEach
void setup() throws Exception {
    mocks = MockitoAnnotations.openMocks(this);

    when(dataSource.getConnection()).thenReturn(connection);
    when(riskDataSource.getConnection()).thenReturn(connection);
    when(decisionsDataSource.getConnection()).thenReturn(connection);

    when(connection.prepareStatement(anyString())).thenReturn(statement);
    when(connection.createStatement()).thenReturn(st);

    when(dataSource.getConnection().createStatement()).thenReturn(st);
    when(st.executeQuery(anyString())).thenReturn(rs);
    when(rs.next()).thenReturn(false);

    service = new SelmedDMSUpdateService(
        dataSource,
        riskDataSource,
        new ApplicationConfiguration(dataSource),
        decisionsDataSource
    );
}

@AfterEach
void tearDown() throws Exception {
    mocks.close();
}

// Your test methods follow here, unchanged

}

