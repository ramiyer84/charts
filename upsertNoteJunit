package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration; import axa.partners.clp.dms.migration.data.dms.*; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.Mockito; import org.mockito.junit.jupiter.MockitoExtension; import org.mockito.junit.jupiter.MockitoSettings; import org.mockito.quality.Strictness;

import javax.sql.DataSource; import java.lang.reflect.Method; import java.sql.*; import java.time.Instant; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.ZoneOffset;

import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class) @MockitoSettings(strictness = Strictness.LENIENT) public class SelmedDMSUpdateServiceTest {

@Mock DataSource dataSource;
@Mock DataSource riskDataSource;
@Mock DataSource decisionsDataSource;
@Mock Connection connection;
@Mock Statement st;
@Mock ResultSet rs;
@Mock PreparedStatement statement;

LocalDateTime localDateTime;
LocalDate localDate;

@BeforeEach
void setup() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.createStatement()).thenReturn(st);
    when(connection.prepareStatement(anyString())).thenReturn(statement);
    when(statement.executeUpdate()).thenReturn(1);
}

private SelmedDMSUpdateService buildService() throws Exception {
    return new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);
}

@Test
public void testSelmedDMSRisksApplicationFileUpdatePackage() throws Exception {
    Method method;
    boolean status = false;

    when(st.executeQuery(anyString())).thenReturn(rs);
    when(rs.next()).thenReturn(false);

    SelmedDMSUpdateService service = buildService();

    localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
    localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);

    SelmedDMSRisksApplicationFileUpdatePackage updatePackage = new SelmedDMSRisksApplicationFileUpdatePackage();
    updatePackage.setId(10000L);
    updatePackage.setCreatedAt(localDateTime);
    updatePackage.setCreationDate(localDateTime);
    updatePackage.setFileNumber("1297284F");
    updatePackage.setLocked(true);
    updatePackage.setModificationDate(localDateTime);
    updatePackage.setOperation("TEST_OPERATION");

    method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
    method.setAccessible(true);
    status = (boolean) method.invoke(service, connection, updatePackage);

    assertTrue(status);
}

@Test
public void testPostMigrationNoteInsertedWhenDifferent() throws Exception {
    Method method;
    boolean status = false;

    LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setId(10000L);
    updatePackage.setCreatedAt(now);
    updatePackage.setCreationDate(now);
    updatePackage.setModificationDate(now);
    updatePackage.setOperation("TEST_OPERATION");
    updatePackage.setRiskId("RISK123");
    updatePackage.setAuthorId("macao.migration@partners.axa");
    updatePackage.setDescription("New note to insert");
    updatePackage.setNoteId("noteId123");
    updatePackage.setNoteType(2);

    PreparedStatement riskStmt = mock(PreparedStatement.class);
    PreparedStatement refStmt = mock(PreparedStatement.class);
    PreparedStatement notesStmt = mock(PreparedStatement.class);
    PreparedStatement insertStmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    ResultSet refRs = mock(ResultSet.class);
    ResultSet notesRs = mock(ResultSet.class);

    when(riskDataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber = ?"))).thenReturn(riskStmt, refStmt);
    when(riskStmt.executeQuery()).thenReturn(rs);
    when(refStmt.executeQuery()).thenReturn(refRs);
    when(rs.next()).thenReturn(true);
    when(rs.getString(1)).thenReturn("riskId123");
    when(rs.getTimestamp(2)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));
    when(refRs.next()).thenReturn(true);
    when(refRs.getTimestamp(1)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

    when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId = ?"))).thenReturn(notesStmt);
    when(notesStmt.executeQuery()).thenReturn(notesRs);
    when(notesRs.next()).thenReturn(true);
    when(notesRs.getString(1)).thenReturn("Some other note");

    when(connection.prepareStatement(startsWith("INSERT INTO Notes"))).thenReturn(insertStmt);
    when(insertStmt.executeUpdate()).thenReturn(1);

    SelmedDMSUpdateService service = buildService();
    method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
    method.setAccessible(true);
    status = (boolean) method.invoke(service, connection, updatePackage);

    assertTrue(status);
}

@Test
public void testPostMigrationNoteSkippedWhenDuplicate() throws Exception {
    Method method;
    boolean status = false;

    LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setId(10000L);
    updatePackage.setCreatedAt(now);
    updatePackage.setCreationDate(now);
    updatePackage.setModificationDate(now);
    updatePackage.setOperation("TEST_OPERATION");
    updatePackage.setRiskId("RISK123");
    updatePackage.setAuthorId("macao.migration@partners.axa");
    updatePackage.setDescription("Duplicate note");
    updatePackage.setNoteId("noteId123");
    updatePackage.setNoteType(2);

    PreparedStatement riskStmt = mock(PreparedStatement.class);
    PreparedStatement refStmt = mock(PreparedStatement.class);
    PreparedStatement notesStmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    ResultSet refRs = mock(ResultSet.class);
    ResultSet notesRs = mock(ResultSet.class);

    when(riskDataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(contains("FROM Risks r WHERE r.FileNumber = ?"))).thenReturn(riskStmt, refStmt);
    when(riskStmt.executeQuery()).thenReturn(rs);
    when(refStmt.executeQuery()).thenReturn(refRs);
    when(rs.next()).thenReturn(true);
    when(rs.getString(1)).thenReturn("riskId123");
    when(rs.getTimestamp(2)).thenReturn(Timestamp.valueOf("2024-01-01 00:00:00"));
    when(refRs.next()).thenReturn(true);
    when(refRs.getTimestamp(1)).thenReturn(Timestamp.valueOf("2023-01-01 00:00:00"));

    when(connection.prepareStatement(contains("FROM Notes n WHERE n.RiskId = ?"))).thenReturn(notesStmt);
    when(notesStmt.executeQuery()).thenReturn(notesRs);
    when(notesRs.next()).thenReturn(true);
    when(notesRs.getString(1)).thenReturn("Duplicate note");

    SelmedDMSUpdateService service = buildService();
    method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
    method.setAccessible(true);
    status = (boolean) method.invoke(service, connection, updatePackage);

    assertTrue(status);
}

@Test
public void testPreMigrationNoteInsertedIfNotExists() throws Exception {
    SelmedDMSUpdateService service = buildService();
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setFileNumber("2020A123456");
    updatePackage.setDescription("Pre-migration test");
    updatePackage.setNoteType(2);
    updatePackage.setAuthorId("macao.migration@axa.com");
    updatePackage.setCreatedAt(LocalDateTime.now());
    updatePackage.setCreationDate(LocalDateTime.now());
    updatePackage.setModificationDate(LocalDateTime.now());

    boolean status = service.updateSelmedDMSUpdatePackages(connection, updatePackage);
    assertTrue(status);
}

@Test
public void testPostMigrationNoteInsertedWhenNewText() throws Exception {
    SelmedDMSUpdateService service = buildService();
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setFileNumber("2023A000001");
    updatePackage.setDescription("Post-migration insert");
    updatePackage.setNoteType(2);
    updatePackage.setAuthorId("macao.migration@axa.com");
    updatePackage.setCreatedAt(LocalDateTime.now());
    updatePackage.setCreationDate(LocalDateTime.now());
    updatePackage.setModificationDate(LocalDateTime.now());

    boolean status = service.updateSelmedDMSUpdatePackages(connection, updatePackage);
    assertTrue(status);
}

}

