package axa.partners.clp.dms.migration.service;

import axa.partners.clp.dms.migration.data.ApplicationConfiguration; import axa.partners.clp.dms.migration.data.dms.*; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.Mock; import org.mockito.MockitoAnnotations; import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource; import java.lang.reflect.Method; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.time.Instant; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.ZoneOffset;

import static org.junit.jupiter.api.Assertions.; import static org.mockito.ArgumentMatchers.anyString; import static org.mockito.Mockito.;

@ExtendWith(MockitoExtension.class) public class SelmedDMSUpdateServiceTest {

@Mock private DataSource dataSource;
@Mock private DataSource riskDataSource;
@Mock private DataSource decisionsDataSource;
@Mock private Connection connection;
@Mock private Statement st;
@Mock private PreparedStatement statement;
@Mock private ResultSet rs;

private LocalDateTime localDateTime;
private LocalDate localDate;

private SelmedDMSUpdateService service;

@BeforeEach
void setup() throws Exception {
    MockitoAnnotations.openMocks(this);

    when(dataSource.getConnection()).thenReturn(connection);
    when(riskDataSource.getConnection()).thenReturn(connection);
    when(decisionsDataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(anyString())).thenReturn(statement);
    when(connection.createStatement()).thenReturn(st);
    when(dataSource.getConnection().createStatement()).thenReturn(st);
    when(st.executeQuery(anyString())).thenReturn(rs);
    when(rs.next()).thenReturn(false);

    service = new SelmedDMSUpdateService(dataSource, riskDataSource, new ApplicationConfiguration(dataSource), decisionsDataSource);

    localDateTime = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);
    localDate = LocalDate.ofInstant(Instant.now(), ZoneOffset.UTC);
}

@Test
public void testSelmedDMSNotesUpdatePackage() throws Exception {
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setId(10000L);
    updatePackage.setCreatedAt(localDateTime);
    updatePackage.setCreationDate(localDateTime);
    updatePackage.setModificationDate(localDateTime);
    updatePackage.setOperation("TEST_OPERATION");
    updatePackage.setRiskId("26736273");
    updatePackage.setAuthorId("NGO");
    updatePackage.setDescription("NOTES");
    updatePackage.setNoteId("noteId123");
    updatePackage.setNoteType(2);

    when(statement.executeUpdate()).thenReturn(1);

    Method method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
    method.setAccessible(true);
    boolean status = (boolean) method.invoke(service, connection, updatePackage);

    assertTrue(status);
}

@Test
public void testPostMigrationNoteInsertedWhenDifferent() throws Exception {
    SelmedDMSNotesUpdatePackage updatePackage = new SelmedDMSNotesUpdatePackage();
    updatePackage.setId(10001L);
    updatePackage.setCreatedAt(localDateTime);
    updatePackage.setCreationDate(localDateTime);
    updatePackage.setModificationDate(localDateTime);
    updatePackage.setOperation("TEST_OPERATION");
    updatePackage.setRiskId("26736274");
    updatePackage.setAuthorId("macao.migration@axa.com");
    updatePackage.setDescription("POST MIGRATION NOTE");
    updatePackage.setNoteId("noteId456");
    updatePackage.setNoteType(2);
    updatePackage.setFileNumber("2023A000001");

    // Mock application creation date comparison
    PreparedStatement mockRefStmt = mock(PreparedStatement.class);
    ResultSet mockRefRs = mock(ResultSet.class);
    when(connection.prepareStatement(contains("SELECT MIN(r.CreationDate)"))).thenReturn(mockRefStmt);
    when(mockRefStmt.executeQuery()).thenReturn(mockRefRs);
    when(mockRefRs.next()).thenReturn(true);
    when(mockRefRs.getTimestamp(1)).thenReturn(Timestamp.valueOf("2022-12-31 00:00:00"));

    // Mock for no existing matching note
    PreparedStatement mockExistingStmt = mock(PreparedStatement.class);
    ResultSet mockExistingRs = mock(ResultSet.class);
    when(connection.prepareStatement(contains("SELECT n.Description FROM Notes n"))).thenReturn(mockExistingStmt);
    when(mockExistingStmt.executeQuery()).thenReturn(mockExistingRs);
    when(mockExistingRs.next()).thenReturn(false);

    when(statement.executeUpdate()).thenReturn(1);

    Method method = SelmedDMSUpdateService.class.getDeclaredMethod("updateSelmedDMSUpdatePackages", Connection.class, Entity.class);
    method.setAccessible(true);
    boolean status = (boolean) method.invoke(service, connection, updatePackage);

    assertTrue(status);
}

}

