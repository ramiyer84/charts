package file

import (
	"context"
	"io"
	"os"
	"path/filepath"

	"github.axa.com/axa-partners-clp/selmed-migration-tool/internal/worker"
)

// FileItem represents one file and satisfies worker.Item.
type FileItem string

func (i FileItem) Name() string { return string(i) }

// Provider implements worker.Provider for local filesystem.
type Provider struct {
	root    string
	pattern string
}

// New creates a new local file provider rooted at 'root' and constrained by 'pattern'.
func New(root, pattern string) *Provider {
	return &Provider{root: root, pattern: pattern}
}

// List finds files that match the configured pattern under root.
func (p *Provider) List(_ context.Context) ([]worker.Item, error) {
	glob := filepath.Join(p.root, p.pattern)
	matches, err := filepath.Glob(glob)
	if err != nil {
		return nil, err
	}
	out := make([]worker.Item, 0, len(matches))
	for _, m := range matches {
		out = append(out, FileItem(m))
	}
	return out, nil
}

// Open opens the file for reading.
func (p *Provider) Open(_ context.Context, it worker.Item) (io.ReadCloser, error) {
	name := it.Name()
	return os.Open(name)
}