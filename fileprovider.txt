package provider

import (
	"context"
	"io"
	"os"
	"path/filepath"

	"github.axa.com/axa-partners-clp/selmed-migration-tool/internal/worker"
)

// FileItem represents one file and satisfies worker.Item.
type FileItem string

func (i FileItem) Name() string { return string(i) }

// FileProvider implements worker.Provider for the local filesystem.
type FileProvider struct {
	root    string
	pattern string
}

// List scans the directory and returns items matching the pattern.
func (p *FileProvider) List(_ context.Context) ([]worker.Item, error) {
	matches, err := filepath.Glob(filepath.Join(p.root, p.pattern))
	if err != nil {
		return nil, err
	}
	items := make([]worker.Item, 0, len(matches))
	for _, m := range matches {
		items = append(items, FileItem(filepath.Base(m)))
	}
	return items, nil
}

// Open opens the given item for reading.
func (p *FileProvider) Open(_ context.Context, it worker.Item) (io.ReadCloser, error) {
	path := filepath.Join(p.root, it.Name())
	return os.Open(path)
}