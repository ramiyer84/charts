public void upsertNote(Note note, LocalDateTime now) throws ServiceException { try (Connection conn = this.risksDataSource.getConnection()) { conn.setAutoCommit(false);

String appNumber = note.applicationNumber();
    String migrationAuthor = "macao.migration@partners.axa";
    String referenceAppNumber = "2021A024046";

    RiskInfo riskInfo = getRiskInfoForApplication(appNumber, conn);
    Timestamp refCreated = getReferenceCreationDate(referenceAppNumber, conn);

    if (isPreMigration(riskInfo.creationDate(), refCreated)) {
        handlePreMigrationLogic(conn, riskInfo.riskId(), note, now, migrationAuthor);
    } else {
        handlePostMigrationLogic(conn, riskInfo.riskId(), note, now, migrationAuthor);
    }

    DBUtil.commit(conn);
} catch (SQLException e) {
    String msg = String.format("Cannot upsert DMS Risk Note for application '%s': %s", note.applicationNumber(), e.getMessage());
    logger.error(msg);
    throw new ServiceException(msg);
}

}

private RiskInfo getRiskInfoForApplication(String appNumber, Connection conn) throws SQLException, ServiceException { try (PreparedStatement ps = conn.prepareStatement("SELECT r.Id, r.CreationDate FROM Risks r WHERE r.FileNumber = ?")) { ps.setString(1, appNumber); try (ResultSet rs = ps.executeQuery()) { if (!rs.next()) { throw new ServiceException("Risk not found for application: " + appNumber); } return new RiskInfo(rs.getString(1), rs.getTimestamp(2)); } } }

private Timestamp getReferenceCreationDate(String referenceAppNumber, Connection conn) throws SQLException, ServiceException { try (PreparedStatement ps = conn.prepareStatement("SELECT r.CreationDate FROM Risks r WHERE r.FileNumber = ?")) { ps.setString(1, referenceAppNumber); try (ResultSet rs = ps.executeQuery()) { if (!rs.next()) { throw new ServiceException("Reference application not found: " + referenceAppNumber); } return rs.getTimestamp(1); } } }

private boolean isPreMigration(Timestamp targetCreated, Timestamp referenceCreated) { return !targetCreated.after(referenceCreated); }

private void handlePreMigrationLogic(Connection conn, String riskId, Note note, LocalDateTime now, String migrationAuthor) throws SQLException { try (PreparedStatement stPreMigration = conn.prepareStatement( "SELECT n.Id, n.Description, n.CreationDate, n.AuthorId, n.NoteType " + "FROM Notes n WHERE n.RiskId = ? AND n.AuthorId = ? ORDER BY n.CreationDate")) {

stPreMigration.setString(1, riskId);
    stPreMigration.setString(2, migrationAuthor);

    try (ResultSet rs = stPreMigration.executeQuery()) {
        if (rs.next()) {
            String noteId = rs.getString(1);
            String existingText = rs.getString(2);

            if (noteId != null && !note.note().equals(existingText)) {
                try (PreparedStatement stUpdate = conn.prepareStatement(
                        "UPDATE Notes SET ModificationDate = ?, Description = ? WHERE Id = ?");
                     PreparedStatement stHistory = conn.prepareStatement(
                        "INSERT INTO NoteHistories (Id, CreationDate, ModificationDate, Description, AuthorId, NoteType, NoteId) " +
                        "VALUES (?, ?, ?, ?, ?, ?, ?)")) {

                    updateNote(stUpdate, noteId, now, note.note());
                    insertNoteHistory(stHistory, noteId, now, rs.getTimestamp(3), note.note(), rs.getString(4), rs.getInt(5));
                }
            }
        } else {
            try (PreparedStatement stInsert = conn.prepareStatement(
                    "INSERT INTO Notes (Id, CreationDate, ModificationDate, Description, AuthorId, NoteType, RiskId) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?)")) {
                String noteId = UUID.randomUUID().toString();
                insertNote(stInsert, noteId, note.creationDate(), now, note.note(), migrationAuthor, 0, riskId);
            }
        }
    }
}

}

private void handlePostMigrationLogic(Connection conn, String riskId, Note note, LocalDateTime now, String migrationAuthor) throws SQLException { try (PreparedStatement stPostMigration = conn.prepareStatement( "SELECT n.Description FROM Notes n WHERE n.RiskId = ? ORDER BY n.CreationDate")) {

stPostMigration.setString(1, riskId);

    boolean noteAlreadyExists = false;
    try (ResultSet rs = stPostMigration.executeQuery()) {
        while (rs.next()) {
            String existingText = rs.getString(1);
            if (note.note().equals(existingText)) {
                noteAlreadyExists = true;
                break;
            }
        }
    }

    if (!noteAlreadyExists) {
        try (PreparedStatement stInsert = conn.prepareStatement(
                "INSERT INTO Notes (Id, CreationDate, ModificationDate, Description, AuthorId, NoteType, RiskId) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)")) {
            String noteId = UUID.randomUUID().toString();
            insertNote(stInsert, noteId, note.creationDate(), now, note.note(), migrationAuthor, 0, riskId);
        }
    }
}

}

private void updateNote(PreparedStatement stUpdate, String noteId, LocalDateTime now, String newText) throws SQLException { stUpdate.setTimestamp(1, Timestamp.valueOf(now)); stUpdate.setString(2, newText); stUpdate.setString(3, noteId); stUpdate.executeUpdate(); }

private void insertNote(PreparedStatement stInsert, String noteId, LocalDateTime created, LocalDateTime modified, String text, String authorId, int noteType, String riskId) throws SQLException { stInsert.setString(1, noteId); stInsert.setTimestamp(2, Timestamp.valueOf(created)); stInsert.setTimestamp(3, Timestamp.valueOf(modified)); stInsert.setString(4, text); stInsert.setString(5, authorId); stInsert.setInt(6, noteType); stInsert.setString(7, riskId); stInsert.executeUpdate(); }

private void insertNoteHistory(PreparedStatement stHistory, String noteId, LocalDateTime modified, Timestamp created, String text, String authorId, int noteType) throws SQLException { stHistory.setString(1, UUID.randomUUID().toString()); stHistory.setTimestamp(2, created); stHistory.setTimestamp(3, Timestamp.valueOf(modified)); stHistory.setString(4, text); stHistory.setString(5, authorId); stHistory.setInt(6, noteType); stHistory.setString(7, noteId); stHistory.executeUpdate(); }

private record RiskInfo(String riskId, Timestamp creationDate) {}

